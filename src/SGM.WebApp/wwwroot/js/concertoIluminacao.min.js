var pages = pages || {};
pages.concertoIluminacao = pages.concertoIluminacao || {};
pages.concertoIluminacao.services = pages.concertoIluminacao.services || {};

pages.concertoIluminacao.model = function () {    
    
    var vmSolicitacao = function (solicitacao, perfil) {
        var self = this;

        self.solicitacaoId = ko.observable();
        self.usuarioId = ko.observable();
        self.usuarioNome = ko.observable();
        self.observacao = ko.observable();
        self.situacaoId = ko.observable();
        self.situacaoNome = ko.observable();
        self.dataCadastro = ko.observable();
        self.logradouro = ko.observable();
        self.numero = ko.observable();
        self.cep = ko.observable();
        self.bairro = ko.observable();
        self.complemento = ko.observable();
        self.municipioId = ko.observable();
        self.municipioNome = ko.observable();
        self.estadoId = ko.observable();
        self.estadoNome = ko.observable();
        self.historicoSolicitacoes = ko.observableArray([]);

        if (solicitacao) {
            self.solicitacaoId(solicitacao.solicitacaoId);
            self.usuarioId(solicitacao.usuarioId);
            self.usuarioNome(solicitacao.usuarioNome);
            self.observacao(solicitacao.observacao);
            self.situacaoId(solicitacao.situacaoId);
            self.situacaoNome(solicitacao.situacaoNome);
            self.dataCadastro(solicitacao.dataCadastro);            
            self.logradouro(solicitacao.logradouro);
            self.numero(solicitacao.numero);
            self.cep(solicitacao.cep);
            self.bairro(solicitacao.bairro);
            self.complemento(solicitacao.complemento);
            self.municipioId(solicitacao.municipioId);
            self.municipioNome(solicitacao.municipioNome);
            self.estadoId(solicitacao.estadoId);
            self.estadoNome(solicitacao.estadoNome);           

            solicitacao.historicoSolicitacoes.forEach(function (item) {
                self.historicoSolicitacoes.push(new vmHistoricoSolicitacao(item));
            });
        }

        self.exibeBotaoIniciarAtendimento = ko.computed(function () {
            if (self.situacaoNome() == 'Solicitação Efetuada' &&
                (
                    perfil === pages.concertoIluminacao.services.EPerfil.ADMINISTRADOR ||
                    perfil === pages.concertoIluminacao.services.EPerfil.FUNCIONARIO 
                ))
                return true;

            return false;
        });  

        self.exibeBotaoFinalizarAtendimento = ko.computed(function () {
            if (self.situacaoNome() == 'Em Andamento' &&
                (
                    perfil === pages.concertoIluminacao.services.EPerfil.ADMINISTRADOR ||
                    perfil === pages.concertoIluminacao.services.EPerfil.FUNCIONARIO
                ))
                return true;

            return false;
        });  

        self.exibeBotaoExcluir = ko.computed(function () {
            if (self.situacaoNome() != 'Cancelado' && self.situacaoNome() != 'Concluida' &&
                (
                    perfil === pages.concertoIluminacao.services.EPerfil.ADMINISTRADOR ||
                    perfil === pages.concertoIluminacao.services.EPerfil.GESTOR
                ))
                return true;

            return false;
        });  
    };  

    var vmHistoricoSolicitacao = function (historicoSolicitacao) {
        var self = this;

        self.historicoSolicitacaoId = ko.observable(historicoSolicitacao.historicoSolicitacaoId);
        self.usuarioAlteracaoId = ko.observable(historicoSolicitacao.usuarioAlteracaoId);
        self.usuarioAlteracaoNome = ko.observable(historicoSolicitacao.usuarioAlteracaoNome);
        self.situacaoId = ko.observable(historicoSolicitacao.situacaoId);
        self.situacaoNome = ko.observable(historicoSolicitacao.situacaoNome);
        self.dataAlteracao = ko.observable(historicoSolicitacao.dataAlteracao);
    };

    var vmEstado = function (estado) {
        var self = this;

        self.estadoId = ko.observable(estado.estadoId);
        self.nome = ko.observable(estado.nome);
        self.sigla = ko.observable(estado.sigla);
    };

    var vmMunicipio = function (municipio) {
        var self = this;

        self.municipioId = ko.observable(municipio.municipioId);
        self.nome = ko.observable(municipio.nome);
    }; 

    return {   
        vmSolicitacao,
        vmEstado,
        vmMunicipio
    };
}();
var pages = pages || {};
pages.concertoIluminacao = pages.concertoIluminacao || {};

pages.concertoIluminacao.services = function () { 

    var EPerfil = {
        ADMINISTRADOR: "Administrador",
        GESTOR: "Gestor",
        USUARIO: "Usuario",
        FUNCIONARIO: "Funcionário"
    };  

    var obterTodos = function () {
        var url = pages.metadata.actionUrl("/api/gateway/solicitacaoReparo");
        return pages.dataServices.get(url);
    }

    var obterSolicitacaoId = function (solicitacaoId) {
        var url = pages.metadata.actionUrl("/api/gateway/solicitacaoReparo/" + solicitacaoId);
        return pages.dataServices.get(url);
    }

    var salvar = function (parametro) {
        var url = pages.metadata.actionUrl("/api/gateway/solicitacaoReparo");
        return pages.dataServices.postAjax(url, parametro);
    }  

    var deletar = function (solicitacaoId) {
        var url = pages.metadata.actionUrl("/api/gateway/solicitacaoReparo/" + solicitacaoId);
        return pages.dataServices.deleteAjax(url);
    }

    var iniciarAtendimento = function (solicitacaoId, parametro) {
        var url = pages.metadata.actionUrl("/api/gateway/solicitacaoReparo/" + solicitacaoId + "/iniciarAtendimento");
        return pages.dataServices.putAjax(url, parametro);
    }

    var finalizarAtendimento = function (solicitacaoId, parametro) {
        var url = pages.metadata.actionUrl("/api/gateway/solicitacaoReparo/" + solicitacaoId + "/finalizarAtendimento");
        return pages.dataServices.putAjax(url, parametro);
    } 

    var obterMunicipioPorEstadoId = function (estadoId) {
        var url = pages.metadata.actionUrl("/api/gateway/municipios/estado/" + estadoId);
        return pages.dataServices.get(url);
    }

    var obterEstados = function () {
        var url = pages.metadata.actionUrl("/api/gateway/estados");
        return pages.dataServices.get(url);
    }

    return {  
        EPerfil,
        obterTodos,
        obterSolicitacaoId,
        obterMunicipioPorEstadoId,
        obterEstados,
        salvar,
        deletar,
        iniciarAtendimento,
        finalizarAtendimento
    };
}();
var pages = pages || {};
pages.concertoIluminacao = pages.concertoIluminacao || {};
pages.concertoIluminacao.model = pages.concertoIluminacao.model || {};
pages.concertoIluminacao.services = pages.concertoIluminacao.services || {};

pages.metadata = pages.metadata || {};
pages.dataServices = pages.dataServices || {};
pages.utils = pages.utils || {};

pages.concertoIluminacao.viewModel = function () {   
    var model = pages.concertoIluminacao.model;
    var service = pages.concertoIluminacao.services;
   
    var viewModelSolicitacaoIluminacao = new function () {
        var self = this;       

        self.usuarioLogado = ko.observable(new pages.menu.model.vmUsuarioLogado(getDataToken()));     
        self.solicitacoes = ko.observableArray([]);
        self.datatable = ko.observable();

        self.init = function () {  
            self.obterSolicitacoes();
        };        

        self.obterSolicitacoes = function () {
            pages.dataServices.bloquearTela();
            service.obterTodos().then(function (result) {
                result.data.forEach(function (item) {
                    self.solicitacoes.push(new model.vmSolicitacao(item, self.usuarioLogado().perfil()));
                });
            }).catch(function (result) {
                console.log(result.data);
            }).finally(function () {
                self.inicializarDatatable();
                pages.dataServices.desbloquearTela();
            });
        };

        self.inicializarDatatable = function () {
            var table = $('#datatable-solicitacao-iluminacao').DataTable({
                lengthChange: false,
                order: [[0, 'asc']],
                responsive: true,
                columnDefs: [                    
                    {
                        targets: [4],
                        orderable: false,
                        searchable: false,
                        className: "text-center"
                    }],
                buttons: [
                    {
                        extend: 'pdfHtml5',
                        title: 'Listagem Solicitação de Concerto Iluminação'
                    },
                ],
                language: pages.utils.languageDataTablePtBr
            });

            table.buttons().container().appendTo('#datatable-solicitacao-iluminacao_wrapper .col-md-6:eq(0)');
            self.datatable(table);
        }; 

        self.visualizar = function (solicitacaoId) {
            pages.dataServices.bloquearTela();
            window.location.href = "/ConcertoIluminacao/Visualizar/" + solicitacaoId;
        };

        self.excluir = function (solicitacaoId) {
            bootbox.dialog({
                closeButton: false,
                message: "Confirma a exclusão da solicitação?",
                buttons: {
                    nao: {
                        label: "NÃO",
                        className: "btn-sm btn-danger"
                    },
                    sim: {
                        label: "SIM",
                        className: "btn-sm btn-primary",
                        callback: function () {
                            pages.dataServices.bloquearTela();
                            service.deletar(solicitacaoId).then(function () {
                                bootbox.alert("Solicitação excluído com sucesso!", function () {
                                    location.reload();
                                });
                            }).catch(function (result) {
                                if (result.exibeMensagem)
                                    bootbox.alert(result.data);
                            }).finally(function () {
                                pages.dataServices.desbloquearTela();
                            });
                        }
                    }
                }
            });
        };

        self.iniciarAtendimento = function (solicitacaoId) {
            bootbox.dialog({
                closeButton: false,
                message: "Confirma início do atendimento da solicitação?",
                buttons: {
                    nao: {
                        label: "NÃO",
                        className: "btn-sm btn-danger"
                    },
                    sim: {
                        label: "SIM",
                        className: "btn-sm btn-primary",
                        callback: function () {
                            pages.dataServices.bloquearTela();
                            service.iniciarAtendimento(solicitacaoId).then(function () {
                                bootbox.alert("Atendimento da solicitação iniciado com sucesso!", function () {
                                    location.reload();
                                });
                            }).catch(function (result) {
                                if (result.exibeMensagem)
                                    bootbox.alert(result.data);
                            }).finally(function () {
                                pages.dataServices.desbloquearTela();
                            });
                        }
                    }
                }
            });
        };

        self.finalizarAtendimento = function (solicitacaoId) {
            bootbox.dialog({
                closeButton: false,
                message: "Confirma o término do atendimento da solicitação?",
                buttons: {
                    nao: {
                        label: "NÃO",
                        className: "btn-sm btn-danger"
                    },
                    sim: {
                        label: "SIM",
                        className: "btn-sm btn-primary",
                        callback: function () {
                            pages.dataServices.bloquearTela();
                            service.finalizarAtendimento(solicitacaoId).then(function () {
                                bootbox.alert("Atendimento da solicitação finalizado com sucesso!", function () {
                                    location.reload();
                                });
                            }).catch(function (result) {
                                if (result.exibeMensagem)
                                    bootbox.alert(result.data);
                            }).finally(function () {
                                pages.dataServices.desbloquearTela();
                            });
                        }
                    }
                }
            });
        };

        self.init();

    };

    ko.applyBindings(viewModelSolicitacaoIluminacao, bindingBody);     

    $('#datatable-solicitacao-iluminacao tbody').on('click', '#btnExcluir', function (event) {
        var solicitacaoId = event.currentTarget.value;
        viewModelSolicitacaoIluminacao.excluir(solicitacaoId);
    });

    $('#datatable-solicitacao-iluminacao tbody').on('click', '#btnIniciarAtendimento', function (event) {
        var solicitacaoId = event.currentTarget.value;
        viewModelSolicitacaoIluminacao.iniciarAtendimento(solicitacaoId);
    });

    $('#datatable-solicitacao-iluminacao tbody').on('click', '#btnFinalizarAtendimento', function (event) {
        var solicitacaoId = event.currentTarget.value;
        viewModelSolicitacaoIluminacao.finalizarAtendimento(solicitacaoId);
    });

    $('#datatable-solicitacao-iluminacao tbody').on('click', '#btnVisualizar', function (event) {
        var solicitacaoId = event.currentTarget.value;
        viewModelSolicitacaoIluminacao.visualizar(solicitacaoId);
    });
}();