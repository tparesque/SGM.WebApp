var pages = pages || {};
pages.concertoIluminacao = pages.concertoIluminacao || {};
pages.concertoIluminacao.services = pages.concertoIluminacao.services || {};

pages.concertoIluminacao.model = function () {    
    
    var vmSolicitacao = function (solicitacao, perfil) {
        var self = this;

        self.solicitacaoId = ko.observable();
        self.usuarioId = ko.observable();
        self.usuarioNome = ko.observable();
        self.observacao = ko.observable();
        self.situacaoId = ko.observable();
        self.situacaoNome = ko.observable();
        self.dataCadastro = ko.observable();
        self.logradouro = ko.observable();
        self.numero = ko.observable();
        self.cep = ko.observable();
        self.bairro = ko.observable();
        self.complemento = ko.observable();
        self.municipioId = ko.observable();
        self.municipioNome = ko.observable();
        self.estadoId = ko.observable();
        self.estadoNome = ko.observable();
        self.historicoSolicitacoes = ko.observableArray([]);

        if (solicitacao) {
            self.solicitacaoId(solicitacao.solicitacaoId);
            self.usuarioId(solicitacao.usuarioId);
            self.usuarioNome(solicitacao.usuarioNome);
            self.observacao(solicitacao.observacao);
            self.situacaoId(solicitacao.situacaoId);
            self.situacaoNome(solicitacao.situacaoNome);
            self.dataCadastro(solicitacao.dataCadastro);            
            self.logradouro(solicitacao.logradouro);
            self.numero(solicitacao.numero);
            self.cep(solicitacao.cep);
            self.bairro(solicitacao.bairro);
            self.complemento(solicitacao.complemento);
            self.municipioId(solicitacao.municipioId);
            self.municipioNome(solicitacao.municipioNome);
            self.estadoId(solicitacao.estadoId);
            self.estadoNome(solicitacao.estadoNome);           

            solicitacao.historicoSolicitacoes.forEach(function (item) {
                self.historicoSolicitacoes.push(new vmHistoricoSolicitacao(item));
            });
        }

        self.exibeBotaoIniciarAtendimento = ko.computed(function () {
            if (self.situacaoNome() == 'Solicitação Efetuada' &&
                (
                    perfil === pages.concertoIluminacao.services.EPerfil.ADMINISTRADOR ||
                    perfil === pages.concertoIluminacao.services.EPerfil.FUNCIONARIO 
                ))
                return true;

            return false;
        });  

        self.exibeBotaoFinalizarAtendimento = ko.computed(function () {
            if (self.situacaoNome() == 'Em Andamento' &&
                (
                    perfil === pages.concertoIluminacao.services.EPerfil.ADMINISTRADOR ||
                    perfil === pages.concertoIluminacao.services.EPerfil.FUNCIONARIO
                ))
                return true;

            return false;
        });  

        self.exibeBotaoExcluir = ko.computed(function () {
            if (self.situacaoNome() != 'Cancelado' && self.situacaoNome() != 'Concluida' &&
                (
                    perfil === pages.concertoIluminacao.services.EPerfil.ADMINISTRADOR ||
                    perfil === pages.concertoIluminacao.services.EPerfil.GESTOR
                ))
                return true;

            return false;
        });  
    };  

    var vmHistoricoSolicitacao = function (historicoSolicitacao) {
        var self = this;

        self.historicoSolicitacaoId = ko.observable(historicoSolicitacao.historicoSolicitacaoId);
        self.usuarioAlteracaoId = ko.observable(historicoSolicitacao.usuarioAlteracaoId);
        self.usuarioAlteracaoNome = ko.observable(historicoSolicitacao.usuarioAlteracaoNome);
        self.situacaoId = ko.observable(historicoSolicitacao.situacaoId);
        self.situacaoNome = ko.observable(historicoSolicitacao.situacaoNome);
        self.dataAlteracao = ko.observable(historicoSolicitacao.dataAlteracao);
    };

    var vmEstado = function (estado) {
        var self = this;

        self.estadoId = ko.observable(estado.estadoId);
        self.nome = ko.observable(estado.nome);
        self.sigla = ko.observable(estado.sigla);
    };

    var vmMunicipio = function (municipio) {
        var self = this;

        self.municipioId = ko.observable(municipio.municipioId);
        self.nome = ko.observable(municipio.nome);
    }; 

    return {   
        vmSolicitacao,
        vmEstado,
        vmMunicipio
    };
}();
var pages = pages || {};
pages.concertoIluminacao = pages.concertoIluminacao || {};

pages.concertoIluminacao.services = function () { 

    var EPerfil = {
        ADMINISTRADOR: "Administrador",
        GESTOR: "Gestor",
        USUARIO: "Usuario",
        FUNCIONARIO: "Funcionário"
    };  

    var obterTodos = function () {
        var url = pages.metadata.actionUrl("/api/gateway/solicitacaoReparo");
        return pages.dataServices.get(url);
    }

    var obterSolicitacaoId = function (solicitacaoId) {
        var url = pages.metadata.actionUrl("/api/gateway/solicitacaoReparo/" + solicitacaoId);
        return pages.dataServices.get(url);
    }

    var salvar = function (parametro) {
        var url = pages.metadata.actionUrl("/api/gateway/solicitacaoReparo");
        return pages.dataServices.postAjax(url, parametro);
    }  

    var deletar = function (solicitacaoId) {
        var url = pages.metadata.actionUrl("/api/gateway/solicitacaoReparo/" + solicitacaoId);
        return pages.dataServices.deleteAjax(url);
    }

    var iniciarAtendimento = function (solicitacaoId, parametro) {
        var url = pages.metadata.actionUrl("/api/gateway/solicitacaoReparo/" + solicitacaoId + "/iniciarAtendimento");
        return pages.dataServices.putAjax(url, parametro);
    }

    var finalizarAtendimento = function (solicitacaoId, parametro) {
        var url = pages.metadata.actionUrl("/api/gateway/solicitacaoReparo/" + solicitacaoId + "/finalizarAtendimento");
        return pages.dataServices.putAjax(url, parametro);
    } 

    var obterMunicipioPorEstadoId = function (estadoId) {
        var url = pages.metadata.actionUrl("/api/gateway/municipios/estado/" + estadoId);
        return pages.dataServices.get(url);
    }

    var obterEstados = function () {
        var url = pages.metadata.actionUrl("/api/gateway/estados");
        return pages.dataServices.get(url);
    }

    return {  
        EPerfil,
        obterTodos,
        obterSolicitacaoId,
        obterMunicipioPorEstadoId,
        obterEstados,
        salvar,
        deletar,
        iniciarAtendimento,
        finalizarAtendimento
    };
}();
var pages = pages || {};
pages.concertoIluminacao = pages.concertoIluminacao || {};
pages.concertoIluminacao.model = pages.concertoIluminacao.model || {};
pages.concertoIluminacao.services = pages.concertoIluminacao.services || {};

pages.metadata = pages.metadata || {};
pages.dataServices = pages.dataServices || {};
pages.utils = pages.utils || {};

pages.concertoIluminacao.cadastroViewModel = function () {   
    var model = pages.concertoIluminacao.model;
    var service = pages.concertoIluminacao.services;
   
    ko.applyBindings(new function () {
        var self = this;       
        
        self.solicitacao = ko.observable(new model.vmSolicitacao());  
        self.estados = ko.observableArray([]);
        self.municipios = ko.observableArray([]);
        self.bloqueiaSalvar = ko.observable(false);  

        self.init = function () {           
            
            self.obterEstados();  
            self.solicitacao().estadoId.subscribe(function (estadoId) {
                if (!estadoId) return;

                self.obterMunicipiosPorEstadoId(estadoId);
            });           
        };       

        self.obterEstados = function () {
            pages.dataServices.bloquearTela();
            service.obterEstados().then(function (result) {
                result.data.forEach(function (item) {
                    self.estados.push(new model.vmEstado(item));
                });
            }).catch(function (result) {
                console.log(result.data);
            }).finally(function () {
                pages.dataServices.desbloquearTela();
            });
        };

        self.obterMunicipiosPorEstadoId = function (estadoId) {            
            self.municipios([]);
            pages.dataServices.bloquearTela();
            service.obterMunicipioPorEstadoId(estadoId).then(function (result) {
                result.data.forEach(function (item) {
                    self.municipios.push(new model.vmMunicipio(item));
                });                   
            }).catch(function (result) {
                console.log(result.data);                   
            }).finally(function () {
                pages.dataServices.desbloquearTela();
            });           
        };

        self.validar = function () {
            var mensagens = [];

            if (isNullOrEmptyOrWriteSpace(self.solicitacao().logradouro()))
                mensagens.push("<strong>Logradouro</strong> é obrigatório!");

            if (isNullOrEmpty(self.solicitacao().numero()))
                mensagens.push("<strong>Número</strong> é obrigatório!");

            if (isNullOrEmptyOrWriteSpace(self.solicitacao().cep()))
                mensagens.push("<strong>CEP</strong> é obrigatório!");

            if (isNullOrEmptyOrWriteSpace(self.solicitacao().bairro()))
                mensagens.push("<strong>Bairro</strong> é obrigatório!");

            if (isNullOrEmpty(self.solicitacao().estadoId()))
                mensagens.push("<strong>Estado</strong> é obrigatório!");

            if (isNullOrEmpty(self.solicitacao().municipioId()))
                mensagens.push("<strong>Município</strong> é obrigatório!");

            if (mensagens.any()) {
                bootbox.alert(mensagens.join("</br>"));
                return false;
            }
            return true;
        };

        self.salvar = function () {

            if (!self.validar()) { return; }

            var municipioSelecionado = self.municipios().firstOrDefault(x => x.municipioId() == self.solicitacao().municipioId());
            var estadoSelecionado = self.estados().firstOrDefault(x => x.estadoId() == self.solicitacao().estadoId());

            var parametro = {                                               
                Observacao: self.solicitacao().observacao(),               
                Logradouro: self.solicitacao().logradouro(),
                Numero: self.solicitacao().numero(),
                CEP: self.solicitacao().cep(),
                Bairro: self.solicitacao().bairro(),
                Complemento: self.solicitacao().complemento(),
                MunicipioId: self.solicitacao().municipioId(),
                MunicipioNome: municipioSelecionado.nome(),
                EstadoId: self.solicitacao().estadoId(),
                EstadoNome: estadoSelecionado.nome() 
            };

            console.log(parametro)
            pages.dataServices.bloquearTela();
            service.salvar(parametro).then(function () {                
                bootbox.alert("Solicitação salva com sucesso!", function () {
                    self.voltar();
                }); 
            }).catch(function (result) {
                if (result.exibeMensagem)
                    bootbox.alert(result.data);

                self.bloqueiaSalvar(false);                
            }).finally(function () {
                pages.dataServices.desbloquearTela();
            });
        };

        self.voltar = function () {
            pages.dataServices.bloquearTela();
            window.location.href = "/ConcertoIluminacao/Index";
        };

        self.init();

    }, bindingBody);
}();